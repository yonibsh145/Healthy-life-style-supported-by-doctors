const User = require('../models/userModel');
const asyncHandler = require('express-async-handler');
const bcrypt = require('bcryptjs');

//@desc     register a new user
//@route    POST /api/users/register
//@access  Public
const registerUser = asyncHandler(async (req, res) => {
    const {name, username, email, password} = req.body;
    if(!name || !username || !email || !password){
        res.status(400).json({message: "Please fill all fields"});
    }
    const userExist = await User.findOne({email}).lean().exec();
    if(userExist){
        res.status(409).json({message: "User already exist"});
    }
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(password, salt);
    //create user object and save to db
    const user = await User.create({name, username, email, password: hashedPassword, medicalHistory});
    if(user){
        res.status(201).json({message: "User created successfully"});
    }else{
        res.status(400).json({message: "Invalid user data"});
    } 
});

//@desc    authenticate user and get token
//@route   POST /api/users/login
//@access  Public
const authUser = asyncHandler(async (req, res) => {
    const { email, password } = req.body;
  
    const user = await User.findOne({ email });
  
    if (user && (await user.matchPassword(password))) {
      res.json({
        _id: user._id,
        name: user.name,
        email: user.email,
        role: user.role,
        token: generateToken(user._id),
      });
    } else {
      res.status(401);
      throw new Error('Invalid email or password');
    }
  });

//@desc     client send request to specialist to use his program
//@route    PUT /api/specialist/use-program
//@access   Private
const requestToUse = asyncHandler(async (req, res) => {
  
    const user = await User.findById(req.params.id);
    if (user) {
        user.program = req.body.program || user.program;
        const updatedUser = await user.save();
        res.json({
            _id: updatedUser._id,
            programStatus: updatedUser.programStatus,
        });
    } else {
        res.status(404);
        throw new Error('User not found');
    }
});


//@desc     activate program for a user by program id
//@route    PUT /api/users/activate-program/:id
//@access   Private
const activateProgram = asyncHandler(async (req, res) => {
    const user = await User.findById(req.params.id);
    if(user){
        user.program = req.body.programId;
        const updatedUser = await user.save();
        res.json({
            _id: updatedUser._id,
            name: updatedUser.name,
            username: updatedUser.username,
            email: updatedUser.email,
            medicalHistory: updatedUser.medicalHistory,
            program: updatedUser.program,
            token: generateToken(updatedUser._id)
        })
    }else{
        res.status(404).json({message: "User not found"});
    }
});

//@desc     deactivate program for a user by program id
//@route    PUT /api/users/deactivate-program/:id
//@access   Private
const deactivateProgram = asyncHandler(async (req, res) => {
    const user = await User.findById(req.params.id);
    if(user){
        //check if user has a active program
        if(!user.program){
            res.status(400).json({message: "User does not have an active program"});
        }else{
            user.program = null;
            const updatedUser = await user.save();
             res.json({
                _id: updatedUser._id,
                name: updatedUser.name,
                username: updatedUser.username,
                email: updatedUser.email,
                medicalHistory: updatedUser.medicalHistory,
                program: updatedUser.program,
                token: generateToken(updatedUser._id)
        })
    }
    }else{
        res.status(404).json({message: "User not found"});
    }
});

//desc     get user profile
//@route    GET /api/users/profile
//@access   Private
const getUserProfile = asyncHandler(async (req, res) => {
     const user = await User.findById(req.user._id);
     if(user){
         res.json({
             _id: user._id,
             name: user.name,
             username: user.username,
             email: user.email,
             medicalHistory: user.medicalHistory,
             token: generateToken(user._id)
         })
     }else{
         res.status(404).json({message: "User not found"});
     }
});

//desc     update user profile
//@route    PUT /api/users/profile
//@access   Private
const updateUserProfile = asyncHandler(async (req, res) => {
    const user = await User.findById(req.user._id);
    if(user){
        user.name = req.body.name || user.name;
        user.username = req.body.username || user.username;
        user.email = req.body.email || user.email;
        user.medicalHistory = req.body.medicalHistory || user.medicalHistory;
        if(req.body.password){
            user.password = req.body.password;
        }
        const updatedUser = await user.save();
        res.json({
            _id: updatedUser._id,
            name: updatedUser.name,
            username: updatedUser.username,
            email: updatedUser.email,
            medicalHistory: updatedUser.medicalHistory,
            token: generateToken(updatedUser._id)
        })
    }else{
        res.status(404).json({message: "User not found"});
    }
});

//desc     search for a program by by program 

module.exports = {updateUserProfile, getUserProfile, registerUser, authUser,activateProgram, deactivateProgram,requestToUse}