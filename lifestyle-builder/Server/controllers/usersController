const User = require('../models/userModel');
const Specialist = require('../models/specialistsModel');
const Program = require('../models/programModel');
const asyncHandler = require('express-async-handler');
const generateToken = require('../utils/generateToken');
//@desc     register a new user
//@route    POST /api/users/register
//@access  Public
const registerUser = asyncHandler(async (req, res) => {
    const {username, email, password} = req.body;
    if( !username || !email || !password){
        res.status(400).json({message: "Please fill all fields"});
    }
    const userExist = await User.findOne({email}).lean().exec();
    if(userExist){
        res.status(409).json({message: "User already exist"});
    }
    const user = await User.create({username, email, password});
    if(user){
        res.status(200).
        json({
            _id: user._id,
            username: user.username,
            email: user.email,
            role: user.role,
            token: generateToken(user._id),
        });
    }else{
        res.status(400).json({message: "Invalid user data"});
    } 
});

//@desc    authenticate user and get token
//@route   POST /api/users/login
//@access  Public
const authUser = asyncHandler(async (req, res) => {
    const { email, password } = req.body;
  
    const user = await User.findOne({ email });
  
    if (user && (await user.matchPassword(password))) {
        res.json({
            _id: user._id,
            username: user.username,
            email: user.email,
            role: user.role,
            token: generateToken(user._id),
        });
    } else {
      res.status(401);
      throw new Error('Invalid email or password');
    }
  });

//@desc     client send request to specialist to use his program
//@route    PUT /api/specialist/use-program
//@access   Private
const useProgram = asyncHandler(async (req, res) => {
    // Obtain the necessary data from the request
    const userId = req.user._id;
    const programId = req.body.programId; // Assuming the program ID is sent in the request body
  
    try {
      // Check if the user and program exist
      const user = await User.findById(userId);
      const program = await Program.findById(programId);
      const specialist = await Specialist.findOne({ user: program.specailist });
  
      if (!user || !program || !specialist) {
        res.status(404).json({ message: 'User, program, or specialist not found' });
        return;
      }
  
      // Update the user's document with the program and its pending status
      user.programs.push(programId);
      const programIndex = user.programs.findIndex(program => program._id.toString() === programId);
      user.programs[programIndex].programStatus = 'Pending';
      await user.save();
  
      // Update the specialist's document with the new request
      specialist.requests.push({
        user: userId,
        program: programId,
      });
      await specialist.save();
  
      res.status(200).json({ message: 'Request sent to the specialist' });
    } catch (error) {
      console.error(error);
      res.status(500).json({ message: 'Server Error' });
    }
  });
  


//@desc     activate program for a user by program id
//@route    PUT /api/users/activate-program/:id
//@access   Private
const activateProgram = asyncHandler(async (req, res) => {
    const userId = req.user._id;
    const programId = req.params.id;
  
    try {
      const user = await User.findById(userId);
  
      if (!user) {
        res.status(404).json({ message: 'User not found' });
        return;
      }
  
      // Find the program in the user's programs array
      const programIndex = user.programs.findIndex(
        (program) => program.toString() === programId
      );
  
      if (programIndex === -1) {
        res.status(404).json({ message: 'Program not found' });
        return;
      }
  
      const program = await Program.findById(programId);
  
      if (!program) {
        res.status(404).json({ message: 'Program not found' });
        return;
      }
  
      // Check if the program status is "Accepted"
      if (user.programs[programIndex].programStatus !== 'Accepted') {
        res.status(400).json({ message: 'Program is not accepted' });
        return;
      }
  
      // Activate the program by updating its status within the user's programs array
      user.programs[programIndex].programStatus = 'Active';
      await user.save();
  
      res.status(200).json({ message: 'Program activated successfully' });
    } catch (error) {
      console.error(error);
      res.status(500).json({ message: 'Server Error' });
    }
  });
  
 
  
//@desc     pause program for a user by program id
//@route    PUT /api/users/pause-program/:id
//@access   Private
const pauseProgram = asyncHandler(async (req, res) => {
    const userId = req.user._id;
    const programId = req.params.id;
  
    try {
      // Find the user
      const user = await UserModel.findById(userId);
  
      if (!user) {
        res.status(404).json({ message: 'User not found' });
        return;
      }
  
      // Check if the program is already paused
      const programIndex = user.programs.findIndex(program => program._id.toString() === programId);
      if (programIndex !== -1 && user.programs[programIndex].programStatus === 'Paused') {
        res.status(400).json({ message: 'Program is already paused for the user' });
        return;
      }
  
      // Check if the program is active for the user
      if (programIndex === -1 || user.programs[programIndex].programStatus !== 'Active') {
        res.status(400).json({ message: 'Program is not active for the user' });
        return;
      }
  
      // Update the user's program status to "Paused"
      user.programs[programIndex].programStatus = 'Paused';
      await user.save();
  
      res.status(200).json({ message: 'Program paused for the user' });
    } catch (error) {
      console.error(error);
      res.status(500).json({ message: 'Server Error' });
    }
  });
  

//desc     get user profile
//@route    GET /api/users/profile
//@access   Private
const getUserProfile = asyncHandler(async (req, res) => {
     const user = await User.findById(req.user._id);
     if(user){
         res.json({
             _id: user._id,
             name: user.name,
             username: user.username,
             email: user.email,
             medicalHistory: user.medicalHistory,
             program: user.program
         })
     }else{
         res.status(404).json({message: "User not found"});
     }
});

//desc     update user profile
//@route    PUT /api/users/profile
//@access   Private
const updateUserProfile = asyncHandler(async (req, res) => {
    const user = await User.findById(req.user._id);
    if(user){
        user.name = req.body.name || user.name;
        user.username = req.body.username || user.username;
        user.email = req.body.email || user.email;
        user.medicalHistory = req.body.medicalHistory || user.medicalHistory;
        if(req.body.password){
            user.password = req.body.password;
        }
        const updatedUser = await user.save();
        res.json({
            _id: updatedUser._id,
            name: updatedUser.name,
            username: updatedUser.username,
            email: updatedUser.email,
            medicalHistory: updatedUser.medicalHistory,
            token: generateToken(updatedUser._id)
        })
    }else{
        res.status(404).json({message: "User not found"});
    }
});

//desc add result for activity in program
//@route    PUT /api/users/updateActivityResult
//@access   Private
const updateActivityResult = asyncHandler(async (req, res) => {
    const userId = req.user._id;
    const { programId, activityId, result } = req.body;
  
    try {
      // Find the user
      const user = await UserModel.findById(userId);
  
      if (!user) {
        res.status(404).json({ message: 'User not found' });
        return;
      }
  
      // Find the program in the user's programs
      const programIndex = user.programs.findIndex(program => program._id.toString() === programId);
      if (programIndex === -1) {
        res.status(404).json({ message: 'Program not found for the user' });
        return;
      }
  
      // Find the activity in the program's activities
      const activityIndex = user.programs[programIndex].activities.findIndex(activity => activity._id.toString() === activityId);
      if (activityIndex === -1) {
        res.status(404).json({ message: 'Activity not found in the program' });
        return;
      }
  
      // Update the activity's result
      user.programs[programIndex].activities[activityIndex].result = result;
      await user.save();
  
      res.status(200).json({ message: 'Activity result updated successfully' });
    } catch (error) {
      console.error(error);
      res.status(500).json({ message: 'Server Error' });
    }
  });


  




module.exports = {updateUserProfile, getUserProfile, registerUser, authUser,activateProgram, pauseProgram,useProgram, updateActivityResult};