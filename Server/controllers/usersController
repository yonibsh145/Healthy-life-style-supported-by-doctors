const User = require('../models/userModel');
const Specialist = require('../models/specialistsModel');
const Program = require('../models/programModel');
const asyncHandler = require('express-async-handler');
const generateToken = require('../utils/generateToken');
//@desc     register a new user
//@route    POST /api/users/register
//@access  Public
const registerUser = asyncHandler(async (req, res) => {
    const {username, email, password} = req.body;
    if( !username || !email || !password){
        res.status(400).json({message: "Please fill all fields"});
    }
    const userExist = await User.findOne({email}).lean().exec();
    if(userExist){
        res.status(409).json({message: "User already exist"});
    }
    const user = await User.create({username, email, password});
    if(user){
        res.status(200).
        json({
            _id: user._id,
            username: user.username,
            email: user.email,
            role: user.role,
            token: generateToken(user._id),
        });
    }else{
        res.status(400).json({message: "Invalid user data"});
    } 
});

//@desc    authenticate user and get token
//@route   POST /api/users/login
//@access  Public
const authUser = asyncHandler(async (req, res) => {
    const { email, password } = req.body;
  
    const user = await User.findOne({ email });
  
    if (user && (await user.matchPassword(password))) {
        res.json({
            _id: user._id,
            username: user.username,
            email: user.email,
            role: user.role,
            token: generateToken(user._id),
        });
    } else {
      res.status(401);
      throw new Error('Invalid email or password');
    }
  });

//@desc     Client sends a request to a specialist to use a specific program
//@route    PUT /api/users/use-program
//@access   Public
const useProgram = asyncHandler(async (req, res) => {
  // Obtain the necessary data from the request body
  const { userId, programId } = req.body;
  console.log('here',userId);
  console.log('here2',programId);
  try {
    // Check if the user and program exist
    const user = await User.findById(userId).populate('programs');
    const program = await Program.findById(programId).populate('specialist');

    if (!user || !program) {
      res.status(404).json({ message: 'User or program not found' });
      return;
    }

    const specialist = program.specialist;

    if (!specialist) {
      res.status(404).json({ message: 'Specialist not found for the program' });
      return;
    }

    const hasProgram = user.programs.some((program) => program.program.toString() === programId);

    if (hasProgram) {
      res.status(400).json({ message: 'User already has the program in their array' });
      return;
    }

    // Update the user's document with the program and its pending status
    user.programs.push({
      program: programId,
      programStatus: 'Pending',
    });
    await user.save();

    // Update the specialist's document with the new request
    specialist.requests.push({
      user: userId,
      program: programId,
    });

    // Save the updated user and specialist documents
    await specialist.save();

    res.status(200).json({ message: 'Request sent to the specialist' });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Server Error' });
  }
});

  
 
  
//@desc     pause program for a user by program id
//@route    PUT /api/users/pause-program
//@access   Public
const pauseProgram = asyncHandler(async (req, res) => {
    const{userId, programId} = req.body;
    try {
      // Find the user
      const user = await User.findById(userId);
  
      if (!user) {
        res.status(404).json({ message: 'User not found' });
        return;
      }
  
      // Check if the program is already paused
      const programIndex = user.programs.findIndex(program => program._id.toString() === programId);
      if (programIndex !== -1 && user.programs[programIndex].programStatus === 'Paused') {
        res.status(400).json({ message: 'Program is already paused for the user' });
        return;
      }
  
      // Check if the program is active for the user
      if (programIndex === -1 || user.programs[programIndex].programStatus !== 'Active') {
        res.status(400).json({ message: 'Program is not active for the user' });
        return;
      }
  
      // Update the user's program status to "Paused"
      user.programs[programIndex].programStatus = 'Paused';
      await user.save();
  
      res.status(200).json({ message: 'Program paused for the user' });
    } catch (error) {
      console.error(error);
      res.status(500).json({ message: 'Server Error' });
    }
  });
  

//desc     get user profile
//@route    GET /api/users/profile
//@access   Public
const getUserProfile = asyncHandler(async (req, res) => {
     console.log(req.query);
     const user = await User.findById(req.query.userId);
     if(user){
         res.json({
             _id: user._id,
             name: user.name,
             username: user.username,
             email: user.email,
             medicalHistory: user.medicalHistory,
             program: user.program,
             bio: user.bio,
             tags: user.tags,
         })
     }else{
         res.status(404).json({message: "User not found"});
     }
});

//desc     update user profile
//@route    PUT /api/users/profile
//@access   Public
const updateUserProfile = asyncHandler(async (req, res) => {
    const user = await User.findById(req.body.userId);
    if(user){
        user.name = req.body.name || user.name;
        user.username = req.body.username || user.username;
        user.email = req.body.email || user.email;
        user.medicalHistory = req.body.medicalHistry || user.medicalHistory;
        user.bio = req.body.bio || user.bio;
        user.tags = req.body.tags || user.tags;
        if(req.body.password){
            user.password = req.body.password;
        }
        const updatedUser = await user.save();
        res.json({
            _id: updatedUser._id,
            name: updatedUser.name,
            username: updatedUser.username,
            email: updatedUser.email,
            medicalHistory: updatedUser.medicalHistory,
            token: generateToken(updatedUser._id)
        })
    }else{
        res.status(404).json({message: "User not found"});
    }
});

//desc add result for activity in program
//@route    PUT /api/users/updateActivityResult
//@access   Private
const updateActivityResult = asyncHandler(async (req, res) => {
    const { userId,programId, activityId, result } = req.body;
  
    try {
      // Find the user
      const user = await User.findById(userId);
  
      if (!user) {
        res.status(404).json({ message: 'User not found' });
        return;
      }
  
      // Find the program in the user's programs
      const programIndex = user.programs.findIndex(program => program._id.toString() === programId);
      if (programIndex === -1) {
        res.status(404).json({ message: 'Program not found for the user' });
        return;
      }
  
      // Find the activity in the program's activities
      const activityIndex = user.programs[programIndex].activities.findIndex(activity => activity._id.toString() === activityId);
      if (activityIndex === -1) {
        res.status(404).json({ message: 'Activity not found in the program' });
        return;
      }
  
      // Update the activity's result
      user.programs[programIndex].activities[activityIndex].result = result;
      await user.save();
  
      res.status(200).json({ message: 'Activity result updated successfully' });
    } catch (error) {
      console.error(error);
      res.status(500).json({ message: 'Server Error' });
    }
  });


//desc     get my history of programs that user has done
//@route    GET /api/users/myPrograms//donePrograms
//@access   Private
const getDoneMyPrograms = asyncHandler(async (req, res) => {
  const userId = req.user._id;

  try {
    // Find the user
    const user = await User.findById(userId);

    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }

    // Find the programs that have been marked as 'Done' for the user
    const donePrograms = await Program.find({
      _id: { $in: user.programs },
      programStatus: 'Done',
    }).populate('specialist', 'name').exec();

    res.status(200).json({ donePrograms });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Server Error' });
  }
});
// @desc     Get my active programs
// @route    GET /api/users/myPrograms/activePrograms
// @access   Private
const getActiveMyPrograms = asyncHandler(async (req, res) => {
  const userId = req.user._id;

  try {
    // Find the user
    const user = await User.findById(userId);

    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }

    // Find the programs that are marked as 'Active' for the user
    const activePrograms = await Program.find({
      _id: { $in: user.programs },
      programStatus: 'Active',
    }).populate('specialist', 'name').exec();

    res.status(200).json({ activePrograms });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Server Error' });
  }
});
//dsesc    send message to specialist
//@route    POST /api/users/sendMessage
//@access   Private
const sendMessage = async (req, res) => {
  const { senderId, receiverId, message } = req.body;

  // Check if the sender is a user
  if (req.user.role !== 'user') {
    return res.status(400).json({ message: 'Invalid sender role' });
  }

  try {
    // Find the sender and receiver
    const sender = await UserModel.findById(senderId);
    const receiver = await SpecialistModel.findById(receiverId);

    // Check if sender and receiver exist and if the receiver is in the sender's programs array
    if (!sender || !receiver || !sender.programs.includes(receiverId)) {
      return res.status(404).json({ message: 'Sender or receiver not found' });
    }

    // Create a new message
    const newMessage = {
      sender: sender._id,
      receiver: receiver._id,
      senderRole: 'user',
      receiverRole: 'specialist',
      message,
    };

    // Add the message to the sender's messages array
    sender.messages.push(newMessage);

    // Save the changes
    await sender.save();

    res.status(200).json({ message: 'Message sent successfully' });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Server Error' });
  }
};

//desc     get user program by id for program array in user model
//@route    GET /api/users/myPrograms/program
//@access   Public
const getUserProgramById = asyncHandler(async (req, res) => {
  const userId = req.body.userId;
  const programId = req.body.programId;
  
  try {
    // Find the user by ID
    const user = await UserModel.findById(userId);

    if (!user) {
      return res.status(404).json({ message: "User not found" });
    }

    // Find the program in the user's programs array by ID
    const program = user.programs.find((p) => p.toString() === programId);

    if (!program) {
      return res.status(404).json({ message: "Program not found" });
    }

    // Return the program object
    res.status(200).json(program);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "Server Error" });
  }
});

//desc get user programs
//@route    GET /api/users/myPrograms
//@access   Public
const getUserPrograms = asyncHandler(async (req, res) => {
  const {userId} = req.query;
  console.log('checking', userId);
  try {
    // Find the user by their ID
    const user = await User.findById(userId).populate({
      path: 'programs.program',
      select: 'name activities description duration rating',
    });

    if (!user) {
      return res.status(404).json({ message: "User not found" });
    }

    // Check if the user has any programs
    if (user.programs.length === 0) {
      return res.status(200).json({ message: "User has no programs" });
    }

    // Sort the programs by program status (Active, Paused, Pending)
    const sortedPrograms = user.programs.sort((a, b) => {
      const statusOrder = { Active: 0, Paused: 1, Pending: 2 };
      return statusOrder[a.programStatus] - statusOrder[b.programStatus];
    });

    // Get the user's programs
    //const programs = user.programs;

    res.status(200).json({ programs: sortedPrograms });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "Server Error" });
  }
});

//desc   get messages
//@route  GET /api/users/messages
//@access Private
const getMessages = asyncHandler(async (req, res) => {
  const userId = req.user._id;

  try {
    // Find the user by their ID
    const user = await UserModel.findById(userId).populate("messages sender", "-password");

    if (!user) {
      return res.status(404).json({ message: "User not found" });
    }

    // Get the user's messages
    const messages = user.messages;

    res.status(200).json({ messages });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "Server Error" });
  }
});


//@desc     pause program for a user by program id
//@route    PUT /api/users/reavtiviate-program
//@access   Public
const unPauseProgram = asyncHandler(async (req, res) => {
  const{userId, programId} = req.body;

  try {
    // Find the user
    const user = await User.findById(userId);

    if (!user) {
      res.status(404).json({ message: 'User not found' });
      return;
    }

    // Check if the program is already paused
    const programIndex = user.programs.findIndex(program => program._id.toString() === programId);
    // Check if the program is active for the user
    if (programIndex !== -1 && user.programs[programIndex].programStatus === 'Active') {
      res.status(400).json({ message: 'Program is active for the user' });
      return;
    }
    if (programIndex !== -1 && user.programs[programIndex].programStatus === 'Pending') {
      res.status(400).json({ message: 'Program is pendig for the user' });
      return;
    }

    // Update the user's program status to "Paused"
    user.programs[programIndex].programStatus = 'Active';
    await user.save();

    res.status(200).json({ message: 'Program UnPaused for the user' });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Server Error' });
  }
});



module.exports = {
  updateUserProfile, 
  getUserProfile, 
  registerUser, 
  authUser,
  pauseProgram,
  useProgram,
  updateActivityResult,
  getDoneMyPrograms,
  getActiveMyPrograms,
  sendMessage,
  getUserProgramById,
  getUserPrograms,
  getMessages,
  unPauseProgram,
};